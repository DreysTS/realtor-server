generator client {
  output   = "./__generated__"
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id String @id @default(uuid())

  email       String  @unique
  password    String
  phoneNumber String?

  displayName String  @map("display_name")
  picture     String?

  role UserRole @default(REGULAR)

  isVerified         Boolean @default(false) @map("is_verified")
  isTwoFactorEnabled Boolean @default(false) @map("is_two_factor_enabled")

  method AuthMethod

  accounts Account[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  favorite        Favorite[]
  propertyRequest PropertyRequest[]

  @@map("users")
}

model Account {
  id String @id @default(uuid())

  type     String
  provider String

  refreshToken String? @map("refresh_token")
  accessToken  String? @map("access_token")
  expiresAt    Int     @map("expires_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @map("user_id")

  @@map("accounts")
}

model Token {
  id String @id @default(uuid())

  email     String
  token     String    @unique
  type      TokenType
  expiresIn DateTime  @map("expires_in")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("tokens")
}

enum UserRole {
  REGULAR
  REALTOR
}

enum AuthMethod {
  CREDENTIALS
  GOOGLE
  YANDEX
}

enum TokenType {
  VERIFICATION
  TWO_FACTOR
  PASSWORD_RESET
}

model Property {
  id            String        @id @default(uuid())
  title         String
  description   String
  images        String[]
  price         Float
  square        Float
  rooms         Int
  kitchenSquare Float?        @map("kitchen_square")
  roomsSquare   Float?        @map("rooms_square")
  floor         Int?
  totalFloors   Int?          @map("total_floors")
  isSecondary   Boolean?      @map("is_secondary")
  builtYear     Int?          @map("built_year")
  ceilingHeight Float?        @map("ceiling_height")
  buildingType  BuildingType? @map("building_type")

  propertyType PropertyType?  @default(FLAT)
  sellingType  SellingType?   @map("selling_type")
  status       PropertyStatus @default(DRAFT)

  locationId Int     @map("location_id")
  userId     String? @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Favorite Favorite[]

  location        Location          @relation(fields: [locationId], references: [id], onDelete: Cascade)
  PropertyRequest PropertyRequest[]

  @@map("properties")
}

model Location {
  id         Int        @id @default(autoincrement())
  address    String
  city       String?
  district   String?
  latitude   Float?
  longitude  Float?
  properties Property[]

  @@map("locations")
}

model Favorite {
  userId     String @map("user_id")
  propertyId String @map("property_id")

  user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  favoritedAt DateTime @default(now()) @map("favorited_at")

  @@id([userId, propertyId])
  @@map("favorites")
}

enum PropertyType {
  APARTMENT
  FLAT
  EURO_FLAT
  GAB
}

enum SellingType {
  SALE
  RENT
  SOLD
}

enum BuildingType {
  PANEL
  BRICK
  MONOLITH
}

enum PropertyStatus {
  ACTIVE
  DRAFT
  ARCHIVED
}

model PropertyRequest {
  id          String   @id @default(uuid())
  title       String
  description String
  price       Int
  square      Float
  rooms       Int
  address     String
  images      String[]
  currentUrl  String?

  propertyRequestStatus PropertyRequestStatus @default(PENDING)
  rejectionReason       String?
  propertyId            String?
  userId                String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  property Property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)
  user     User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([propertyRequestStatus])
  @@map("property_requests")
}

enum PropertyRequestStatus {
  PENDING
  APPROWED
  REJECTED
}
